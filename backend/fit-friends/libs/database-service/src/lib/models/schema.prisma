generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                      Int               @id @default(autoincrement()) @map("user_id")
  name                        String
  email                       String            @unique
  avatarUrl                   String?           @map("avatar_url")
  hashPassword                String            @map("hash_password")
  gender                      Gender
  role                        Role
  aboutInfo                   String            @map("about_info")
  birthDate                   DateTime?         @map("birth_date")
  location                    Location
  backgroundImage             String            @map("background_image")
  createdAt                   DateTime          @default(now()) @map("created_at")
  userProfile                 UserProfile?
  trainerProfile              TrainerProfile?
  trainings                   Training[]
  orders                      Order[]
  friends                     User[]            @relation("friends")
  friendsAddedMe              User[]            @relation("friends")
  balance                     UserBalance[]
  notifications               Message[]
  trainingRequestsAsSender    TrainingRequest[] @relation("as_sender")
  trainingRequestsAsRecepient TrainingRequest[] @relation("as_recepient")
  replies                     Reply[]

  @@map("users")
}

model UserProfile {
  profileId           Int              @id @map("profile_id")
  fitnessLevel        FitnessLevel     @map("fitness_level")
  trainingType        TrainingType[]   @map("training_type")
  trainingDuration    TrainingDuration @map("training_duration")
  caloriesToBurn      Int              @map("calories_to_burn")
  dailyCaloriesIntake Int              @map("daily_calories_intake")
  readyForWorkout     Boolean          @map("ready_for_workout")
  user                User             @relation(fields: [profileId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_profiles")
}

model TrainerProfile {
  profileId       Int            @id @map("profile_id")
  fitnessLevel    FitnessLevel   @map("fitness_level")
  trainingType    TrainingType[] @map("training_type")
  certificates    String
  achievements    String
  readyForWorkout Boolean        @map("ready_for_workout")
  user            User           @relation(fields: [profileId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@map("trainer_profiles")
}

model RefreshTokenData {
  tokenId   String   @id @map("token_id")
  userId    Int      @unique @map("user_id")
  expiresIn DateTime @map("expires_in")

  @@map("refresh_tokens_data")
}

model Training {
  trainingId       Int              @id @default(autoincrement()) @map("training_id")
  title            String
  backgroundImage  String           @map("background_image")
  fitnessLevel     FitnessLevel     @map("fitness_level")
  trainingDuration TrainingDuration @map("training_duration")
  trainingType     TrainingType     @map("training_type")
  price            Int
  caloriesToBurn   Int              @map("calories_to_burn")
  description      String
  gender           Gender
  rating           Float            @default(0)
  video            String
  isSpecialOffer   Boolean          @map("is_special_offer")
  trainerId        Int              @map("trainer_id")
  trainer          User             @relation(fields: [trainerId], references: [userId], onUpdate: Cascade)
  orders           Order[]
  balances         UserBalance[]
  replies          Reply[]
  createdAt       DateTime @default(now()) @map("created_at")

  @@map("trainings")
}

model Order {
  orderId       String      @id @default(uuid()) @map("order_id")
  orderType     OrderType   @map("order_type")
  trainingId    Int         @map("training_id")
  training      Training    @relation(fields: [trainingId], references: [trainingId])
  price         Int
  trainingCount Int         @map("training_count")
  sum           Int
  paymentType   PaymentType @map("payment_type")
  createdAt     DateTime    @default(now()) @map("created_at")
  customerId    Int         @map("customer_id")
  customer      User        @relation(fields: [customerId], references: [userId])

  @@map("orders")
}

model UserBalance {
  balanceId       String   @id @default(uuid()) @map("balance_id")
  userId          Int
  user            User     @relation(fields: [userId], references: [userId])
  trainingId      Int
  training        Training @relation(fields: [trainingId], references: [trainingId])
  remainingAmount Int
  createdAt       DateTime @default(now()) @map("created_at")

  @@unique([userId, trainingId])
  @@map("user_balances")
}

model FileData {
  fileName     String   @id @map("file_name")
  originalName String   @map("original_name")
  size         Int
  mimetype     String   @map("mime_type")
  path         String
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("files")
}

model Message {
  id          String   @id @default(uuid())
  recepient   User     @relation(fields: [recepientId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  recepientId Int      @map("recepient_id")
  text        String
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("messages")
}

model TrainingRequest {
  id          String                @id @default(uuid())
  senderId    Int                   @map("sender_id")
  sender      User                  @relation("as_sender", fields: [senderId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  recepient   User                  @relation("as_recepient", fields: [recepientId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  recepientId Int                   @map("recepient_id")
  status      TrainingRequestStatus
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")

  @@map("training_requests")
}

model Reply {
  replyId    Int      @id @default(autoincrement()) @map("reply_id")
  author     User     @relation(fields: [authorId], references: [userId], onUpdate: Cascade, onDelete: Cascade)
  authorId   Int      @map("author_id")
  training   Training @relation(fields: [trainingId], references: [trainingId], onUpdate: Cascade, onDelete: Cascade)
  trainingId Int      @map("training_id")
  rating     Int
  text       String
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("replies")
}

enum Gender {
  Male
  Female
  No_Matter
}

enum Role {
  User
  Trainer
}

enum Location {
  Pionerskaya
  Petrogradskaya
  Udelnaya
  Zvezdnaya
  Sportivnaya
}

enum FitnessLevel {
  Beginner
  Amateur
  Pro
}

enum TrainingType {
  Yoga
  Running
  Boxing
  Stretching
  Crossfit
  Aerobics
  Pilates
}

enum TrainingDuration {
  TenToThirtyMinutes
  ThirtyToFiftyMinutes
  FiftyToEightyMinutes
  EightyToOneHundredMinutes
}

enum OrderType {
  Abonement
}

enum PaymentType {
  Visa
  Mir
  UMoney
}

enum TrainingRequestStatus {
  Pending
  Accepted
  Declined
}
